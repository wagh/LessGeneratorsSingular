LIB "Vinay.lib";

////////////////////////////////////////////
// The main proc for QS_Algorithm. 
//
// INPUT: m x n unimodule matrix M
//
// Assumption: 1. m < n (more columns than rows)
// 2. M is unimodular
//
// OUTPUT: Matrix of transformation W.
////////////////////////////////////////////
proc QS_algorithm(matrix M)
{
    int m = nrows(M);
    int n = ncols(M);
    int i,j;
    
    matrix U,W,column;
    U = unitmat(n);
    W = U;
    
    
    for (i=1;i<=n-1;i++)
    {
        if (i>1)
        {
            M = U * M;
        }
        column = submat(M,i..m,i);
        U = qs_algorithm_column(column);
        U = dsum(unitmat(i),W);
        W = U * W;
    }
    return(W);
}


////////////////////////////////////////////
// proc for QS_Algorithm applied to column
//
// INPUT: m x 1 unimodule (column) matrix M
//
// Assumption: M is unimodular
////////////////////////////////////////////
proc qs_algorithm_column(matrix column)
{
    
    int m = nrows(column);
    int i,j,var_pos,monic_pos;
    list lst_local_W, lst_transformation_mat,local_soln;
    matrix U1, final_mat;
    ideal DENOM;
    
    

    // var_pos = nvars(basering);  // Initialize var_pos to the last
    //                             // variable.
    
    for (var_pos=1;var_pos<=nvars(basering);var_pos++)
    {
        monic_pos = find_monic_pos(column,var_pos);
        if (monic_pos != 0)
        {
            break;
        }
        if(monic_pos == 0)
        {
            "need at least one poly in the column which is monic wrt at least one var.";
            return(0);
        }
        local_soln = get_local_soln(column, var_pos);
        lst_local_W = local_soln[1];
        DENOM = local_soln[2];
        U1 = patch(lst_local_W, var_pos, DENOM);
        column = U1 * column;
        lst_transformation_mat = insert(lst_transformation_mat,U1,size(lst_transformation_mat));
    }

    final_mat = unitmat(m);
    
    for(i=1;i<=size(lst_transformation_mat);i++)
    {
        final_mat lst_transformation_mat[i]*final_mat;
    }
    return(final_mat);
}


///////////////////////////////////////////////////
// INPUT: n x 1 unimodular (column) matrix and int var_pos.
//
// OUTPUT: int i such that column[i,1] is monic wrt var(var_pos)
///////////////////////////////////////////////////
proc find_monic_poly(matrix column, int var_pos)
{
    int n = ncols(column);
    int i;
    int monic_pos = 0;
    
    matrix B;
    

    for (i=1;i<=n;i++)
    {
        B = coeffs(column[i,1],var(var_pos));
        if (B[size(B),1] == 1)
        {
            monic_pos = i;
            break;
        }
    }
    return(monic_pos);
}



proc get_local_solution(matrix M, int var_pos)
{
    intvec v;
    int i,j;
    list l, horrocks_ret_val, loca_W;
    ideal DENOM;
    
    for(i=1;i<=nvars(basering);i++)
    {
        if (i != var_pos)
        {
            v = v,i;
        }
    }
    
    ideal max_id = get_max_id (DENOM, v);
    horrocks_ret_val = Horrocks(col,var_pos,max_id);
    local_W = insert(local_W,horrocks_ret_val[1],size(local_W));
    DENOM = DENOM, horrocks_ret_val[2];

    
    while (reduce(1,std(DENOM)) != 0)
    {
        max_id = get_max_id (DENOM, v);
        horrocks_ret_val = Horrocks(col,var_pos,max_id);
        local_W = insert(local_W,horrocks_ret_val[1],size(local_W));
        DENOM = DENOM, horrocks_ret_val[2];
    }
    return(local_W, DENOM);
}


proc common_denom_mat(matrix M)
{
    int i,j;
    int m = nrows(M);
    int n = ncols(M);
    poly tmp_poly, lcm_poly;
    ideal common_denom;
    
    
    for (i=1;i<=m;i++)
    {
        for (j=1;j<=m;j++)
        {
            common_denom = lcm(common_denom, leadcoef(cleardenom(M[i,j]))/leadcoef(M[i.j]));
        }
    }
    return(common_denom);
}

            


proc patch(list lst_local_W,int var_pos,ideal DENOM)
{
    int r = size(lst_local_W);
    int i,j;
    def bsr=basering;
    ideal m = maxideal(1);
    string s;
    s = "ring new_ring = ("+charstr(bsr)+",";
    
    for (i=1;i<nvars(bsr);i++)
    {
        if(i != var_pos);
        {
            s = s + string(var(i))+",";
        }
    }
    if (i!=var_pos)
    {
        s = s + ")";
    }
    s = s + ",(" + string(var(var_pos)) + ",@t),("+ordstr(bsr)+")";
    execute(s);
        // execute("ring s="+charstr(basering)+",("+varstr(basering)+",@t),dp;");

    ideal m = imap(bsr,m);
    m[var_pos] = var(var_pos) + @t;
    map phi = bsr, m;

    list lst_local_W = imap(bsr, lst_local_W);
    ideal DENOM = phi(DENOM);

    ideal delta_list, denom_list;
    
    
    for (i=1;i<=r;i++)
    {
        lst_inv_mat[i] = inverse(lst_local_W[i]);
        delta_list[i] = lst_local_W[i], phi(lst_inv_mat[i]);
        denom_list[i] = common_denom_mat(delta_list[i]);
    }
    
    if (r == 1)
    {
        matrix rtinv_denom[1][1] = 1/denom_list[1];
    }
    else
    {
        matrix rtinv_denom [size(denom_list)][1] = rightInverse(denom_list);
    }
    m = maxideal(1);
    m[size(m)] = -var(var_pos) * denom_list[1] * rtinv_denom[1];
    map psi = new_ring, m;
    poly Y = var(var_pos);
    
    matrix V = psi(delta_list[1]);
// U = W[1] * sub( inv[1],  {X |--> (X - X*(g_(0,0)) * (denom_list[1]))} );


    for(i=2;i<=r;i++)
    {
        Y = Y - denom_list[i-1]*rtinv_denom[i-1]*var(var_pos);
        m = maxideal(1);
        m[var_pos] = Y;
        m[size(m)] = - denom_list[i]*rtinv_denom[i]*var(var_pos);
        psi = new_ring,m;
        V[i] = psi(delta_list[i]);
    }
    setring(bsr);
    
    return(V);
}


        

            
