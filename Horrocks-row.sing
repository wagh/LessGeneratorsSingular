LIB "Vinay.lib";


///////////////////////////////////////////////////
// INPUT: 1 x n unimodular (row) matrix and int var_pos such that some
// entry in the row is monic wrt var(var_pos).
//
// Assumption: The given row is unimodular
//
// OUTPUT: ?????
///////////////////////////////////////////////////

proc Horrocks(matrix M, int var_pos, ideal max_id)
{
    int i,j,s,t,d;
    int n = ncols(M);
    matrix B;
    poly var_poly = var(var_pos);
    int monic_pos = 0;
    
    matrix completion[n][n];
    matrix list_mat;
    matrix W = unitmat(n);
    poly tmp_poly;

    intvec var_vec;
    var_vec[nvars(basering)] = 0;
    var_vec[var_pos] = 1;    
    
    list l;
    matrix tmp_mat, tmp_mat2;
    matrix E = unitmat(n);
    int unit_containing_poly = 0;
    int unit_coeff;
    poly alpha,beta,tmp_poly;
    
    
    monic_pos = find_monic_pos(rowmvar_pos);
    
    if (monic_pos == 0)
    {
        "Horrocks needs at least one element of the row to be monic.";
        return(M,W);
    }
    
    if (n == 1)
    {
        "The 1 x 1 matrix is invertible";
        return(row);
    }
    if (n == 2)
    {
        lift_mat = lift(1,ideal(row));        
        completion = row[1,1],row[1,2],-lift_mat[1,2],lift_mat[1,1];
        "WHAT IS THE W MATRIX HERE???";
        return(completion,W);
    }
 
// Swapping the 1st and monic_pos-th entries.  The matrix E
// above is corresponding elementary matrix of this change.
    tmp_poly = row[1,1];
    row[1,1] = row[1,monic_pos];
    row[1,monic_pos] = tmp_poly;
// Now row[1,1] is monic.

// Performing the same op on W.
    E = permcol(E,1,monic_pos);
    W = W*E;
    
    s = deg(row[1,1],var_vec);
    if (s == 0)
    {
        // This means row[1,1] is 1 (already monic).
        "need to send the full matrix M to complete cleanup with [row_pos, 1] as position of 1.";
        "";
    }
    
    for (i=2;i<=n;i++)
    {
// Reduce the degree of a_i's if higher than s = deg(a_1)
        t = deg(row[1,i],var_vec);
        E = unitmat(n);
        
        while (t >= s)
        {
            tmp_poly = lead_coeff_var(row[1,i],var_pos);
            row[1,i] = row[1,i] - tmp_poly * var_poly^(t-s) * row[1,1];
            E = addcol(E, 1, - tmp_poly * var_poly^(t-s), i);
            W = W*E;
            t = deg(row[1,i],var_vec);
        }
    }

// Find first a_i, i>=2 such that a_i is not in mR. i.e. a_i is a unit
// in the localization.
    
    for (i=2;i<=n;i++)
    {
        if (is_local_unit(row[1,i],max_id,var_pos) == 1)
        {
            unit_containing_poly = i;
            break;
        }
    }
    if (unit_containing_poly = 0)
    {
        "Something is wrong...";
        "This means all a_i's are in mR, which implies a_1 is a unit, which is
non-costant.";
    }
    tmp_mat = coeffs(row[1,unit_containing_poly], var_poly);
    max_id = std(max_id);
    
    for(i=1;i<=size(tmp_mat);i++)
    {
        if (reduce(tmpmat[i,1],max_id) != 0)
        {
            unit_coeff = i-1;   // Suslin_Lemma needs coeff of y^i
            break;
        }
    }

    tmp_poly = row[1,2];
    row[1,2] = row[1,unit_containing_poly];
    row[1,unit_containing_poly] = tmp_poly;

    E = permcol(E,2,unit_containing_poly);
    W = W*E;
    
    
// Now we are in Suslin Lemma situation.  f=row[1,1] is monic and g =
// row[1,i] with unit_coeff-th coefficient to be a unit wrt max_id.
    l = Suslin_Lemma(row[1,1], row[1,2], var_pos, unit_coeff);
    

// The following code ensures that row[1,2] is the smallest deg poly
// among row[1,2..n].

    for (i=2;i<=n;i++)
    {
        if (deg(row[1,i],var_vec) < deg(row[1,2],var_vec))
        {
            tmp_poly = row[1,2];
            row[1,2] = row[1,i];
            row[1,i] = tmp_poly;
            
            E = permcol(E,2,i);
            W = W*E;
        }
    }

// This will reduce the deg(f_3) and make is smaller than deg(f_1).
    while (deg(row[1,3],var_vec) >= deg(row[1,1],var_vec))
    {
        tmp_poly = lead_coeff_var(row[1,3],var_pos);
        row[1,3] = row[1,3] - tmp_poly * var_poly^(deg(row[1,3],var_vec) - deg(row[1,1],var_vec)) * row[1,1];
        E = addcol(E, 1, -tmp_poly * var_poly^(deg(row[1,3],var_vec) - deg(row[1,1],var_vec)), 3);
        W = W*E;
    }

// Recall the list l contains the return value from SuslinLemma.

    if (deg(row[1,3],var_vec) >= deg(l[1],var_vec))
    {
        while (deg(row[1,3],var_vec) > deg(l[1],var_vec))
        {
            d = deg(row[1,3],var_vec) - deg(l[1],var_vec);
            tmp_poly = lead_coeff_var(row[1,3],var_pos);
            alpha = - tmp_poly * l[2] * var_poly^d;
            beta  = - tmp_poly * l[3] * var_poly^d;
            row[1,3] = row[1,3] - alpha*row[1,1] - beta*[1,2];

            E = unitmat(n);
            E[1,3] = -alpha;
            E[2,3] = -beta;
            W = W*E;
        }

        E = unitmat(2);
        tmp_poly = lead_coeff_var(row[1,3],var_pos);
        
        
        if (is_local_unit(tmp_poly + lead_coeff_var(l[1],var_pos), max_id, var_pos) == 1)
        {
            E[1,3] = l[2];
            E[1,2] = l[3];
        }
        else
        {
            E[1,3] = 1 - tmp_poly * l[2];
            E[1,2] = 1 - tmp_poly * l[3];
        }
        row = row*E;
        W = W*E;    
    }
    else
    {
        E = unitmat(n);
        E[1,3] = l[2];
        E[2,3] = l[3];
        tmp_mat2 = unitmat(n);
        tmp_mat2 = permcol(tmp_mat2,1,3);
        row = row * E * tmp_mat2;
        W = W * E * tmp_mat2;
    }
    
}


///////////////////////////////////////////////////
// INPUT: poly f, int var_pos
//
// OUTPUT: returns leading coeff of f wrt var(var_pos).
///////////////////////////////////////////////////
proc lead_coeff_var(poly f, int var_pos)
{    
    poly var_poly = var(var_pos);
    matrix tmp_mat = coeffs(f,var_poly);
    return(tmp_mat[size(tmp_mat),1]);
}




///////////////////////////////////////////////////
// INPUT: 1 x n unimodular matrix and int var_pos.
//
// OUTPUT: int i such that row[1,i] is monic wrt var(var_pos)
///////////////////////////////////////////////////
proc find_monic_poly(matrix row, int var_pos)
{
    int n = ncols(row);
    int i;
    int monic_pos = 0;
    
    matrix B;
    

    for (i=1;i<=n;i++)
    {
        B = coeffs(row[1,i],var(var_pos));
        if (B[size(B),1] == 1)
        {
            monic_pos = i;
            break;
        }
    }
    return(monic_pos);
}

    

///////////////////////////////////////////////////
// INPUT: m x n unimodular matrix and int var_pos.
//
// This is wraper proc for horrocks. Calls horrocks with each row.
//
// OUTPUT: int i such that row[1,i] is monic wrt var(var_pos)
///////////////////////////////////////////////////
proc horrocks_main(matrix M, int var_pos)
{
    
