/* function to swap array elements */
proc swap (intvec v, int i, int j) 
{
    int	t;
    t = v[i];
    v[i] = v[j];
    v[j] = t;
    return(v);
}

/* recursive function to generate permutations */
proc perm (intvec v, int n, int i) 
{

	/* this function generates the permutations of the array
	 * from element i to element n-1
	 */
    int	j;

	/* if we are at the end of the array, we have one permutation
	 * we can use (here we print it; you could as easily hand the
	 * array off to some other function that uses it for something
	 */
    if (i == n) 
    {
        print(transpose(v));        
        cnt++;
        // print (" ");
    } 
    else
    {
            /* recursively explore the permutations starting
             * at index i going through index n-1
             */
        for (j=i; j<=n; j++) 
        {    
                /* try the array with i and j switched */
            v = swap (v, i, j);
            perm (v, n, i+1);
                /* swap them back the way they were */
            v = swap (v, i, j);
        }
    }
}

intvec v;
int i;
int n = 4;
int cnt;

// for (i=1; i<=n; i++) 
// {
//     v[i] = i+1;
// }
v=1..n;
perm (v,n,1);

"cnt=",cnt;
