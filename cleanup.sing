LIB "control.lib";

proc get_unit_pos(matrix M)
{
    int m = nrows(M);
    int n = ncols(M);

        // Return intvec [i,j] such that M[i,j]=1
    int i,j;
    string s = charstr(basering);
    matrix ltInv[1][1];

    if (find("integer",s) == 0)
    {
        for (i=1;i<=m;i++)
        {
            for (j=1;j<=n;j++)
            {
                ltInv = leftInverse(M[i,j]);
                if ((ltInv) <> 0)
                {
                    return(i,j);
                }
            }
        }
        "The matrix does not contain an invertible element";
        return(0);
    }
    else
    {
        for (i=1;i<=m;i++)
        {
            for (j=1;j<=n;j++)
            {
                if ((M[i,j] == 1) || (M[i,j] == -1))
                {
                    return(i,j);
                }
            }
        }        
        "The matrix does not contain an invertible element";
        return(0);
    }
}


/////////////////////////////////////
// Does a cleanup of the given matrix
//
// INPUT: mxn matrix with at least one entry 1
//
// OUTPUT: matrix of size (m-1)x(n-1) or smaller. 
//
/////////////////////////////////////
proc cleanup(matrix M, int p, int q)
{
    int m = nrows(M);
    int n = ncols(M);
    int i,j;
    matrix MM[m-1][n-1];
    list tmp_list;
    intvec tmp_vec,r,c;

    tmp_vec = 1..m;
    tmp_list = list(tmp_vec[1..size(tmp_vec)]);
    tmp_list = delete(tmp_list,p);

    for (i=1;i<=size(tmp_list);i++)
    {
        r[i]=tmp_list[i];
    }

    tmp_vec = 1..n;
    tmp_list = list(tmp_vec[1..size(tmp_vec)]);
    tmp_list = delete(tmp_list,q);

    for (i=1;i<=size(tmp_list);i++)
    {
        c[i]=tmp_list[i];
    }
    
    matrix pivotCol[m-1][1] = submat(M,r,q)*1/M[p,q];
    matrix pivotRow[1][n-1] = submat(M,p,c);
    
    MM = submat(M,r,c) - pivotCol*pivotRow;
    return(MM);    
}

/////////////////////////////////////
// Does a iterative cleanup of the given matrix, until there are no
// units in the matrix.
//
// INPUT: mxn matrix with at least one entry 1
//
// OUTPUT: A list 
// 1. cleaned up matrix without any units
// 2. a list of column numbers which were deleted during the proc. 
//
// Warning: The above list may contain repeated numbers. It just means
// that first you delete lst_rows_deleted[1] column from Identity
// matrix, then delete lst_rows_deleted[2] column from the resulting
// matrix and so on.
//
// Warning 2: In case of any change in the output format, inform
// Mohamed IMMEDIATELY. The GAP code depends on this output.
/////////////////////////////////////
proc complete_cleanup(matrix M)
{
    list ij;
    int p,q;
    int IS_CLEAN=0;
    list lst_rows_deleted;
    

    while(IS_CLEAN<>1)
    {
        ij = get_unit_pos(M);
        if (size(ij) == 1)
        {
            "No cleanup possible";
            "Returning the original matrix";
            IS_CLEAN=1;
            return(M,lst_rows_deleted);
        }
        p = ij[1];
        q = ij[2];
        lst_rows_deleted[size(lst_rows_deleted)+1] = p;
        M = cleanup(M,p,q);
        
    }
}



// This proc gives the isomorphism matrix by deleting the
// corresponding columns from the identity matrix. The list
// lst_rows_deleted tells (sequentially) which columns are to be
// deleted.  Warning: The above list may contain repeated numbers. It
// just means that first you delete lst_rows_deleted[1] column from I,
// then delete lst_rows_deleted[2] column from the result and so on.
// The second parameter n is the number of columns of the original
// matrix.
proc isomorphism_matrix(list lst_rows_deleted, int n)
{
    matrix M = unitmat(n);
    int i,j;
    list l;
    intvec v,w;

    for (i=1;i<=size(lst_rows_deleted);i++)
    {
        v = 1..ncols(M);
        l = list(v[1..size(v)]);
        l = delete(l,lst_rows_deleted[i]);
        for (j=1;j<=size(l);j++)
        {
            w[j]=l[j];
        }
        M = submat(M,w,1..nrows(M));
        w=0;
        v=0;
    }
    return(M);
}



// option(prot);
// TRACE=1;


ring R = 0,(x,y,z),dp;
matrix M = sparsematrix(6,10,1);

// M = dsum(1,M);
// M = y, x2,   zy, x,9y+6z,
//     1, x+y,37,y,3y+2z, 
//     9x,5xz,   xy, z,7z;

M = 
    0,  73y+72,0,         0,    0,      0,     0,      72x+79z,0,      0,      
    0,  0,     0,         89z,  0,      0,     0,      12z,    87,     96y,    
    39x,0,     0,         54z+6,9,      0,     0,      0,      93y+92z,32x+38y,
    0,  26y,   0,         0,    45y+77z,28x,   84,     0,      0,      18,     
    0,  0,     28x+24y+26,24,   0,      71y+10,53x+62z,0,      0,      0,      
    0,  0,     7y,        0,    10x,    0,     0,      0,      0,      3y+10z ;

print(M);


list cleanMat_list = complete_cleanup(M);
"--------------";
// matrix clean1 = cleanup(cleanMat));
matrix cleanMat = cleanMat_list[1];
list lst_rows_deleted = cleanMat_list[2];
cleanMat;
"-------------------";
lst_rows_deleted;
"-------------------";
print(isomorphism_matrix(lst_rows_deleted,ncols(M)));
