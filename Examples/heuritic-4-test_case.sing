LIB "Vinay.lib";
< "/home/vvss/Downloads/git/LessGeneratorsSingular/heuritic-4.sing";


ring R = 0,(x,y,z),dp;
int n = 5;
matrix M = generate_random_unimod_matrix(n);

    // Example where the second attempt is negative.

    // M[1,1]=x2+y2+13z2+6x+4y+10z+40
    //     M[1,2]=x2+2xy+9yz+8x+5y+13z+12
    //     M[1,3]=3x2+3yz+11x+3y+27z+19
    //     M[1,4]=yz+5x+2y+2z+19
    //     M[1,5]=10y+20
    //     M[2,1]=x2+2xy+9yz+8x+5y+13z+12
    //     M[2,2]=5x2+9y2+10x+18y+18
    //     M[2,3]=3x2+6xz+11x+21y+6z+29
    //     M[2,4]=2xz+9x+2z+9
    //     M[2,5]=20x+20
    //     M[3,1]=3x2+3yz+11x+3y+27z+19
    //     M[3,2]=3x2+6xz+11x+21y+6z+29
    //     M[3,3]=9x2+9z2+12x+18z+62
    //     M[3,4]=3z2+15x+9z+16
    //     M[3,5]=30z+30
    //     M[4,1]=yz+5x+2y+2z+19
    //     M[4,2]=2xz+9x+2z+9
    //     M[4,3]=3z2+15x+9z+16
    //     M[4,4]=z2+4z+29
    //     M[4,5]=10z+20
    //     M[5,1]=10y+20
    //     M[5,2]=20x+20
    //     M[5,3]=30z+30
    //     M[5,4]=10z+20
    //     M[5,5]=100
M;
"";


list l = row_having_right_inverse_containing_unit(M);

if (size(l) != 1)
{
    matrix W = l[3];
    matrix MW = M*W;
    list MW_cleanup_lst = cleanup(MW, l[1],l[2]);
    matrix MW_cleanup = MW_cleanup_lst[1];
    MW_cleanup;
    list ll = row_having_right_inverse_containing_unit(MW_cleanup);
    ll;
}
else
{
    l[1];
}
"-----------------------------------------";
$

list l = column_having_left_inverse_containing_unit(M);

if (size(l) != 1)
{
    matrix W = l[3];
    matrix WM = W*M;

    list WM_cleanup_lst = cleanup(WM, l[1],l[2]);
    matrix WM_cleanup = WM_cleanup_lst[1];
    WM_cleanup;
    list ll = column_having_left_inverse_containing_unit(WM_cleanup);
    ll;
}
else
{
    l[1];
}
"-----------------------------------------";
$

list l = find_row_having_left_inverse(M);

if (size(l) != 1)
{
    l[1],"-th row is invertible";
    "";
    
    // matrix W = invertible_row(M,3,rightInverse(submat(M,1..nrows(M),3)));
    matrix W = invertible_row(M,l[1],l[2]);
    print(W);
    "";
    matrix MW = M*W;
    MW;
    "";
    
    list MW_cleanup_lst = cleanup(MW, l[1],1);
    matrix WM_cleanup = WM_cleanup_lst[1];
    print(WM_cleanup);
    
}
else
{
    l[1];
}
